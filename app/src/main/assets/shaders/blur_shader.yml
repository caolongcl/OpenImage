name: blur

vertex:
  _#1_version 300 es

  layout(location = 0) in vec4 aPosition;
  layout(location = 1) in vec2 aTexCoords;
  out vec2 vTexCoords;

  void main() {
  vTexCoords = aTexCoords;
  gl_Position = aPosition;
  }

#compute:


fragment:
  _#1_version 300 es

  precision mediump float;
  uniform sampler2D uTexSampler;
  uniform vec3 uResolution;

  in highp vec2 vTexCoords;
  out vec4 oFragColor;

  float normpdf(in float x, in float sigma){
    return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
  }

  void mainImage( out vec4 fragColor, in vec2 fragCoord ){
    vec3 c = texture(uTexSampler, fragCoord.xy / uResolution.xy).rgb;

    //declare stuff

    const int mSize = 11;
    const int kSize = (mSize-1)/2;
    float kernel[mSize];
    vec3 final_colour = vec3(0.0);

    //create the 1-D kernel

    float sigma = 7.0;
    float Z = 0.0;
    for (int j = 0; j <= kSize; ++j){
      kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);
    }

    //get the normalization factor (as the gaussian has been clamped)

    for (int j = 0; j < mSize; ++j){
      Z += kernel[j];
    }

    //read out the texels

    for (int i=-kSize; i <= kSize; ++i){
      for (int j=-kSize; j <= kSize; ++j){
        final_colour += kernel[kSize+j]*kernel[kSize+i]*
            texture(uTexSampler, (fragCoord.xy+vec2(float(i),float(j))) / uResolution.xy).rgb;
      }
    }
    fragColor = vec4(final_colour/(Z*Z), 1.0);
  }

  void main() {
    mainImage(oFragColor, gl_FragCoord.xy);
  }